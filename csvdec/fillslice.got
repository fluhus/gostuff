{{/* Template for generating the slice-filling functions. */}}

{{$ints := slice 0 8 16 32 64}}
{{$floats := slice 32 64}}

package csvdec

import (
    "reflect"
    "strconv"
)

// Populates any slice value.
func fillSlice(value reflect.Value, fields []string) error {
	kind := value.Type().Elem().Kind()
	switch kind {
    case reflect.String:
        return fillStringSlice(value, fields)
    {{range $ints -}}
    case reflect.Int{{if .}}{{.}}{{end}}:
        return fillInt{{if .}}{{.}}{{end}}Slice(value, fields)
    {{end -}}
    {{range $ints -}}
    case reflect.Uint{{if .}}{{.}}{{end}}:
        return fillUint{{if .}}{{.}}{{end}}Slice(value, fields)
    {{end -}}
    {{range $floats -}}
    case reflect.Float{{.}}:
        return fillFloat{{.}}Slice(value, fields)
    {{end -}}
	}
	panic("Unsupported type: " + value.Type().String())
}

{{range $ints}}
// Populates the given int{{if .}}{{.}}{{end}} slice with values parsed from fields.
// Returns an error if parsing fails.
func fillInt{{if .}}{{.}}{{end}}Slice(value reflect.Value, fields []string) error {
    parsed := make([]int{{if .}}{{.}}{{end}}, len(fields))
	for i, field := range fields {
		n, err := strconv.ParseInt(field, 0, {{.}})
		if err != nil {
			return err
		}
		parsed[i] = int{{if .}}{{.}}{{end}}(n)
	}
	value.Set(reflect.ValueOf(parsed))
	return nil
}
{{end}}

{{range $ints}}
// Populates the given uint{{if .}}{{.}}{{end}} slice with values parsed from fields.
// Returns an error if parsing fails.
func fillUint{{if .}}{{.}}{{end}}Slice(value reflect.Value, fields []string) error {
    parsed := make([]uint{{if .}}{{.}}{{end}}, len(fields))
	for i, field := range fields {
		n, err := strconv.ParseUint(field, 0, {{.}})
		if err != nil {
			return err
		}
		parsed[i] = uint{{if .}}{{.}}{{end}}(n)
	}
	value.Set(reflect.ValueOf(parsed))
	return nil
}
{{end}}

{{range $floats}}
// Populates the given float{{.}} slice with values parsed from fields.
// Returns an error if parsing fails.
func fillFloat{{.}}Slice(value reflect.Value, fields []string) error {
	parsed := make([]float{{.}}, len(fields))
	for i, field := range fields {
		n, err := strconv.ParseFloat(field, {{.}})
		if err != nil {
			return err
		}
		parsed[i] = float{{.}}(n)
	}
	value.Set(reflect.ValueOf(parsed))
	return nil
}
{{end}}


// Populates the given string slice with values parsed from fields.
// Returns an error if parsing fails.
func fillStringSlice(value reflect.Value, fields []string) error {
	// Fields may be a part of a bigger slice, so copying to allow the big
	// slice to get CG'ed.
	slice := make([]string, len(fields))
	copy(slice, fields)
	value.Set(reflect.ValueOf(slice))
	return nil
}
